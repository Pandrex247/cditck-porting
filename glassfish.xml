<?xml version="1.0"?>
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
    Copyright (c) 2019, 2020 Payara Foundation and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<project name="TCK Glassfish AppServer configuration" basedir="." default="usage">

    <property environment="env" />
    <property file="${basedir}/build.properties" />
    <import file="./common.xml"/>
 
    <property name="admin.user"      value=""/>
    <property name="admin.password"  value="" />
    <property name="server.host"     value="${admin.host}"/>
    <property name="server.port"     value="${admin.port}"/>
    <property name="server.orb.port" value="${orb.port}"/>
    <property name="cli.path"        value="${s1as.admin}"/>
    <property name="imqbin.loc"      value="${s1as.imqbin.loc}"/>
    <property name="server.domain.name" value="${s1as.domain.name}"/>
    <property name="server.domain"   value="${s1as.domain}"/>
    <property name="server.instance" value="${s1as.server}"/>
    <property name="server.config.dir" 	value="config"/>
    <property name="server.home"     value="${glassfish.home}"/>
    <property name="derby.home"      value="${glassfish.home}/../javadb"/>
    <property name="drive"           value="${s1as.applicationRoot}"/>
    <property name="ext.dir.prop"    value="-Djava.ext.dirs="/>
    <property name="start.index"     value="16"/>
    <property name="custom.resource.jndi.name" value="custom/dog"/>
    <property name="use.derby.server"   value="${server.host}"/>
    <property name="use.derby.port"     value="${derby.port}"/>
    <property name="deploy.dir"      value="${impl.vi.deploy.dir}/"/>
    <property name="password.file" value="${porting.home}/password.txt"/> 
    <property name="password.file.template" value="${porting.home}/password.template"/> 
        
    <condition property="asadmin.user.line" value="" 
               else=" --user ${admin.user}">    
        <equals arg1="${admin.user}" arg2="" trim="true"/>   
    </condition>
    <!--<equals arg1="${admin.user}" arg2="" trim="true"/>-->
    <condition property="asadmin.password.line" value="" 
               else=" --passwordfile ${password.file}">    
        <equals arg1="f" arg2="" trim="true"/>   
    </condition>
    <!--<equals arg1="${admin.password}" arg2="" trim="true"/>-->
    
    <target name="filter.password.file">
        <delete file="${password.file}"/>
        <copy file="${password.file.template}"
              tofile="${password.file}"
              overwrite="true">
            <filterset>
              <filter token="master.password" value="${master.password}"/>
              <filter token="admin.password" value="${admin.password}"/>
            </filterset>
        </copy>
    </target>
        
    <!-- Configure the OS specific properties based on the OS
         is being utilized.
     -->
    <target name="configPlatform"
           depends="checkPlatform, configUnix, configWindows, filter.password.file">

      <!-- Check if we need to set jvm options -->

      <condition property="jvm.args.set">
        <not>
          <equals arg1="" arg2="${s1as.jvm.options}" casesensitive="true" trim="true"/>
        </not>
      </condition>
    </target>

    
    <!--
      add.jvm.options installs the jvm options defined in the build.properties
      file.   
    -->
    <target name="add.jvm.options" depends="configPlatform" if="jvm.args.set">

         <antcall target="create-one-jvm-option" >
            <param name="jvm.options" value=" -DcdiTckExcludeDummy=true"/>
         </antcall>

    </target>

    <!--
      drop.jvm.options removes the jvm options that have been previously set.
    -->
    <target name="drop.jvm.options" depends="configPlatform" if="jvm.args.set">

         <antcall target="delete-jvm-options" >
          <param name="jvm.options" value=" -DcdiTckExcludeDummy=true"/>
         </antcall>
    </target>

    
     <!--
       Enable all of the required JMS resources  used by cts.
     -->
     <target name="enable.jms" depends="configPlatform ">
        <exec executable="${exec.asadmin}" >
          <arg line="${exec.asadmin.part2}" />
          <arg line="${asadmin.user.line}"/>
          <arg line="${asadmin.password.line}"/>
          <arg line=" create-jms-resource "/>
          <arg line="--restype " />
          <arg line="jakarta.jms.Queue " />
          <arg line="--property " />
          <arg line="Name=queue_test " />
          <arg line="queue_test " />            
        </exec>

        <exec executable="${exec.asadmin}" >
          <arg line="${exec.asadmin.part2}" />
          <arg line="${asadmin.user.line}"/>
          <arg line="${asadmin.password.line}"/>
          <arg line=" create-jms-resource "/>
          <arg line="--restype " />
          <arg line="jakarta.jms.Topic " />
          <arg line="--property " />
          <arg line="Name=topic_test " />
          <arg line="topic_test " />            
        </exec>
     </target>
  
     <!--
       Disable all of the required JMS resources  used by cts.
     -->
    <target name="disable.jms" depends="configPlatform">
        <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line="${asadmin.user.line}"/>
            <arg line="${asadmin.password.line}"/>
            <arg line=" delete-jms-resource "/>
            <arg line=" queue_test" />            
        </exec>

        <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line="${asadmin.user.line}"/>
            <arg line="${asadmin.password.line}"/>
            <arg line=" delete-jms-resource "/>
            <arg line=" topic_test" />            
        </exec>
    </target>
    
    <!--
       Set default principal to role mapping to true.
     -->
    <target name="set.activate.default.principal.to.role.mapping" depends="configPlatform">
        <antcall target="set" >
            <param name="set.value" value=" server-config.security-service.activate-default-principal-to-role-mapping=true"/>
            <param name="server.port" value="4848"/>
        </antcall>
    </target>
    
    <!--
       Sets implicit cdi to true.
     -->
    <target name="set.implicit.cdi" depends="configPlatform">
        <antcall target="set" >
            <param name="set.value" value=" configs.config.server-config.cdi-service.enable-implicit-cdi=true"/>
            <param name="server.port" value="4848"/>
        </antcall>
    </target>
    
    <!--
      add.cdi.tck.users configures the users required by the CDI tck.
    -->
    <target name="add.cdi.tck.users" depends="configPlatform">
         <antcall target="create-file-user" >
          <param name="usergroups" value="student"/>
          <param name="userName" value="student"/>
         </antcall>
         <antcall target="create-file-user" >
          <param name="usergroups" value="printer"/>
          <param name="userName" value="printer"/>
         </antcall>
         <antcall target="create-file-user" >
          <param name="usergroups" value="student:alarm"/>
          <param name="userName" value="alarm"/>
         </antcall>
    </target>

    <!-- timeout is specified in seconds, default is 3 minutes -->
    <property name="jointimeout" value="180"/>
    <property name="deliverabledir" value="j2ee"/>
    <property name="buildJwsJaxws" value="true"/>
    <property name="skip.server.restart" value="false"/>

</project>
